name: CI checks

on: [push, pull_request]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
<<<<<<< HEAD
          toolchain: 1.56.1
=======
          toolchain: 1.51.0
>>>>>>> 6d83947 (ci fixes)
          override: true

      - name: Fetch path to MASP parameters
        working-directory: ./masp_proofs
        shell: bash
        run: echo "MASP_PARAMS=$(cargo run --release --example get-params-path --features directories)" >> $GITHUB_ENV
<<<<<<< HEAD
      - name: Cache MASP parameters
=======
      - name: Cache Zcash parameters
>>>>>>> 6d83947 (ci fixes)
        id: cache-params
        uses: actions/cache@v2
        with:
          path: ${{ env.MASP_PARAMS }}
          key: ${{ runner.os }}-params
      - name: Fetch MASP parameters
        if: steps.cache-params.outputs.cache-hit != 'true'
        working-directory: ./masp_proofs
        run: cargo run --release --example download-params --features download-params

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --verbose --release --all
      - name: Run slow tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --verbose --release --all -- --ignored

  build:
    name: Build target ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
<<<<<<< HEAD
          - wasm32-unknown-unknown
=======
>>>>>>> 6d83947 (ci fixes)
          - wasm32-wasi

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
<<<<<<< HEAD
          toolchain: 1.56.1
=======
          toolchain: 1.51.0
>>>>>>> 6d83947 (ci fixes)
          override: true
      - name: Add target
        run: rustup target add ${{ matrix.target }}
      - name: cargo fetch
        uses: actions-rs/cargo@v1
        with:
          command: fetch
      - name: Build masp_proofs for target
        working-directory: ./masp_proofs
        run: cargo build --verbose --no-default-features --target ${{ matrix.target }}


  bitrot:
    name: Bitrot check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
<<<<<<< HEAD
          toolchain: 1.56.1
=======
          toolchain: 1.51.0
>>>>>>> 6d83947 (ci fixes)
          override: true
      # Build benchmarks to prevent bitrot
      - name: Build benchmarks
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all --benches

  clippy:
<<<<<<< HEAD
    name: Lint #Clippy (1.56.1)
=======
    name: Clippy (1.51.0)
>>>>>>> 6d83947 (ci fixes)
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
<<<<<<< HEAD
          toolchain: 1.56.1
=======
          toolchain: 1.51.0
>>>>>>> 6d83947 (ci fixes)
          components: clippy
          override: true
      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
<<<<<<< HEAD
          name: Clippy (1.56.1)
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --all-targets -- -D warnings

  clippy-beta:
    name: Nightly lint # Clippy (beta)
=======
          name: Clippy (1.51.0)
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --all-targets -- -D warnings

  clippy-nightly:
    name: Clippy (nightly)
>>>>>>> 6d83947 (ci fixes)
    timeout-minutes: 30
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
<<<<<<< HEAD
          toolchain: beta
          components: clippy
          override: true
      - name: Run Clippy (beta)
        uses: actions-rs/clippy-check@v1
        continue-on-error: true
        with:
          name: Clippy (beta)
=======
          toolchain: nightly
          components: clippy
          override: true
      - name: Run Clippy (nightly)
        uses: actions-rs/clippy-check@v1
        continue-on-error: true
        with:
          name: Clippy (nightly)
>>>>>>> 6d83947 (ci fixes)
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --all-targets -- -W clippy::all

  codecov:
    name: Code coverage
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      # Use stable for this to ensure that cargo-tarpaulin can be built.
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install cargo-tarpaulin
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-tarpaulin

      - name: Fetch path to MASP parameters
        working-directory: ./masp_proofs
        shell: bash
        run: echo "MASP_PARAMS=$(cargo run --release --example get-params-path --features directories)" >> $GITHUB_ENV
      - name: Cache MASP parameters
        id: cache-params
        uses: actions/cache@v2
        with:
          path: ${{ env.MASP_PARAMS }}
          key: ${{ runner.os }}-params
      - name: Fetch MASP parameters
        if: steps.cache-params.outputs.cache-hit != 'true'
        working-directory: ./masp_proofs
        run: cargo run --release --example download-params --features download-params

      - name: Generate coverage report
        uses: actions-rs/cargo@v1
        with:
          command: tarpaulin
          args: --all-features --release --timeout 600 --out Xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2.1.0

  doc-links:
    name: Intra-doc links
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.56.1
          override: true
      - name: cargo fetch
        uses: actions-rs/cargo@v1
        with:
          command: fetch

      # Ensure intra-documentation links all resolve correctly
      # Requires #![deny(intra_doc_link_resolution_failure)] in crates.
      - name: Check intra-doc links
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --all --document-private-items

  fmt:
    name: Rustfmt
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.56.1
          override: true

      # cargo fmt does not build the code, and running it in a fresh clone of
      # the codebase will fail because the protobuf code has not been generated.
      - name: cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all

      # Ensure all code has been formatted with rustfmt
      - run: rustup component add rustfmt
      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  security:
    name: Security - Cargo Audit
    runs-on: ubuntu-latest
    container:
      image: rustlang/rust:nightly
    steps:
    - uses: actions/checkout@v2
    - name: Install cargo-audit
      run: cargo install cargo-audit
    - name: Cargo Audit
      run: cargo audit
